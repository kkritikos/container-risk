package gr.aegean.container.risk.data;

import java.util.HashMap;
import java.util.Map;

import gr.aegean.container.risk.configuration.PropertyReader;

public class VulnerabilityRepository {
	private Map<String, Vulnerability> repository = new HashMap<String, Vulnerability>();
	
	public VulnerabilityRepository() {
		
	}
	
	public Vulnerability getVulnerability(String cveId) {
		Vulnerability v = repository.get(cveId);
		if (v == null) v = retrieveVulnerability(cveId);
		
		return v;
	}
	
	private Vulnerability retrieveVulnerability(String cveId) {
		Vulnerability v = new Vulnerability();
		v.setCveId(cveId);
		
		String nistUrl = PropertyReader.getNvdUrl() + cveId;
		String cveUrl = PropertyReader.getCveApiUrl() + cveId + ".json";
		RetrieveDataFromOnlineDB onlineDb = new RetrieveDataFromOnlineDB();
		org.json.JSONObject object;
		
		try {
			object = onlineDb.readFromNistDB(nistUrl);
			if (object == null) object = onlineDb.readFromCveApi(cveUrl);
			
			String av = (String) object.get("accessVector");
			v.setAccessVector(av);
			
			String ac = (String) object.get("accessComplexity");
			v.setAccessComplexity(ac);
			
			String au = (String) object.get("authentication");
			v.setAuthentication(au);
			
			String confidentiality = (String) object.get("confidentialityImpact");
			v.setConfidentialityImpact(confidentiality);
			
			String integrity = (String) object.get("integrityImpact");
			v.setIntegrityImpact(integrity);
			
			String availability = (String) object.get("availabilityImpact");
			v.setAvailabilityImpact(availability);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		return v;
	}
}
