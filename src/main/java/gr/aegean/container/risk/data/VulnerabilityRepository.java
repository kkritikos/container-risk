package gr.aegean.container.risk.data;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;

import gr.aegean.container.risk.configuration.PropertyReader;

public class VulnerabilityRepository {
	private static final String repoName = "repo";
	private static final int TIMES = 3;
	private Map<String, Vulnerability> repository;
	
	public VulnerabilityRepository() {
		loadRepository();
	}
	
	public void save() {
		try {
			ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(repoName));
			oos.writeObject(repository);
			oos.flush();
			oos.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private void loadRepository() {
		Object o = null;
		try {
			ObjectInputStream ois = new ObjectInputStream(new FileInputStream(repoName));
			o = ois.readObject();
			ois.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		if (o == null) repository = new HashMap<String, Vulnerability>();
		else repository = (Map<String, Vulnerability>)o;
	}
	
	public Vulnerability getVulnerability(String cveId) {
		Vulnerability v = repository.get(cveId);
		if (v == null) {
			v = retrieveVulnerability(cveId);
			repository.put(cveId, v);
		}
		
		return v;
	}
	
	private org.json.JSONObject readVulnerabilityObject(String cveId){
		String nistUrl = PropertyReader.getNvdUrl() + cveId;
		String cveUrl = PropertyReader.getCveApiUrl() + cveId + ".json";
		RetrieveDataFromOnlineDB onlineDb = new RetrieveDataFromOnlineDB();
		org.json.JSONObject object = null;
		
		for (int i = 0; i < TIMES; i++) {
			try {
				object = onlineDb.readFromNistDB(nistUrl);
				if (object == null) break;
			}
			catch(Exception e) {
				//e.printStackTrace();
				System.out.println("Could not read from NVD the url: " + nistUrl);
				System.out.println(e.getMessage());
				if (e instanceof JSONException) return null;
			}
			
			try {
				if (object == null) object = onlineDb.readFromCveApi(cveUrl);
			}
			catch(Exception e) {
				//e.printStackTrace();
				System.out.println("Could not read from CVE-API the url: " + cveUrl);
				System.out.println(e.getClass() + " " + e.getMessage());
				if (e instanceof JSONException || e.getMessage().contains("code: 403")) return null;
			}
			
			if (object != null) break;
		}
		
		return object;
	}
	
	private Vulnerability retrieveVulnerability(String cveId) {
		Vulnerability v = new Vulnerability();
		v.setCveId(cveId);
		
		org.json.JSONObject object = readVulnerabilityObject(cveId);
		if (object == null) return null;
			
		boolean hasAv = object.has("accessVector");
		String av = null;
		if (hasAv) {
			av = (String) object.get("accessVector");
		}
		else av = (String) object.get("attackVector");
		v.setAccessVector(av);
			
		boolean hasAc = object.has("accessComplexity");
		String ac = null;
		if (hasAc) {
			ac = (String) object.get("accessComplexity");
		}
		else ac = (String) object.get("attackComplexity");
		v.setAccessComplexity(ac);
			
		boolean hasAu = object.has("authentication");
		String au = null;
		if (hasAu) {
			au = (String) object.get("authentication");
		}
		else au = "NONE";
		v.setAuthentication(au);
			
		String confidentiality = (String) object.get("confidentialityImpact");
		v.setConfidentialityImpact(confidentiality);
			
		String integrity = (String) object.get("integrityImpact");
		v.setIntegrityImpact(integrity);
			
		String availability = (String) object.get("availabilityImpact");
		v.setAvailabilityImpact(availability);
		
		return v;
	}
}
